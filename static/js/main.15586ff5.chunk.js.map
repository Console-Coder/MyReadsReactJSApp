{"version":3,"sources":["BooksAPI.js","BookComponent.jsx","ShelfComponent.jsx","MyReadsComponent.jsx","SearchComponent.jsx","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","maxResults","BookComponent","props","className","style","width","height","backgroundImage","bgImage","onChange","e","x","informClick","target","value","parentElement","querySelectorAll","backgroundColor","disabled","ShelfComponent","map","as_A_Prop","undefined","MyReadsComponent","Object","assign","currentlyReadingBookList","shelfTitle","wantToReadBookList","ReadBookList","to","BooksAPI","require","SearchComponent","state","searchText","fetchedBooks","initBookList","a","booksArr","rtrnVal","length","el","propsToGive","mainAppState","found_on_A_Shelf","shelfN","push","this","Lis","setState","type","showTheBooks","placeholder","Component","BooksApp","bookTitle","oldShelf","newShelf","newStateObj","filter","newArr","exact","path","booksAndShelves","currentRead","readArr","wantToArr","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15586ff5.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport { update } from './BooksAPI';\n\nfunction BookComponent(props) {\n    function resolveShelfName(x){\n        if(x === \"currentlyReadingBookList\")\n        return \"currentlyReading\";\n        else if(x === \"wantToReadBookList\")\n        return \"wantToRead\";\n        else if(x === \"ReadBookList\")\n        return \"read\";\n    }\n    let funcy = (e) => {\n        props.informClick(props[\"bookTitle\"], props[\"shelf\"], e.target.value, props[\"org\"]);\n        props[\"shelf\"] = e.target.value;\n        e.value = e.target.value;\n        e.target.parentElement.querySelectorAll(`option[style]`)[0].style.backgroundColor = \"\";\n        e.target.parentElement.querySelectorAll(`option[value=\"${props[\"shelf\"]}\"]`)[0].style.backgroundColor = \"rgba(130, 33, 56, 0.5)\";\n        update(props[\"org\"], resolveShelfName(e.target.value))\n    };\n    return (\n        <div className=\"book\">\n            <div className=\"book-top\">\n                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url('${props.bgImage}')` }}></div>\n                <div className=\"book-shelf-changer\">{/* need fix because click func doesn't take args only e i think */}\n                    <select onChange={funcy} value={props[\"shelf\"]}>\n                        <option value=\"move\" disabled>Move to...</option>\n                        <option style={(props[\"shelf\"] === \"currentlyReadingBookList\") ? { backgroundColor: 'rgba(130, 33, 56, 0.5)' } : {}} value=\"currentlyReadingBookList\">Currently Reading</option>\n                        <option style={(props[\"shelf\"] === \"wantToReadBookList\") ? { backgroundColor: 'rgba(130, 33, 56, 0.5)' } : {}} value=\"wantToReadBookList\" >Want to Read</option>\n                        <option style={(props[\"shelf\"] === \"ReadBookList\") ? { backgroundColor: 'rgba(130, 33, 56, 0.5)' } : {}} value=\"ReadBookList\" >Read</option>\n                        <option disabled style={(props[\"shelf\"] === \"none\") ? { backgroundColor: 'rgba(130, 33, 56, 0.5)' } : {}} value=\"none\" >None</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"book-title\">{props[\"bookTitle\"]}</div>\n            <div className=\"book-authors\">{props[\"bookAuthor\"]}</div>\n        </div>\n    );\n}\n\n\nexport default BookComponent;","import React from 'react';\n\nimport BookComponent from \"./BookComponent\";\n\nfunction ShelfComponent(props) {\n    return (\n        <div className=\"bookshelf\" >\n            <h2 className=\"bookshelf-title\" > {props[\"shelfTitle\"]} </h2>\n            <div className=\"bookshelf-books\" >\n                <ol className=\"books-grid\" >\n                    {\n                        // Here we map to create the li elements (Books from BookComponent)\n                        props[\"data\"].map(book => {\n                            let as_A_Prop = {};\n                            as_A_Prop[\"org\"] = book;\n                            as_A_Prop[\"shelf\"] = props[\"shelf\"];\n                            as_A_Prop[\"informClick\"] = props[\"informClick\"];\n                            as_A_Prop[\"bgImage\"] = book[\"imageLinks\"]===undefined?\"\": book[\"imageLinks\"][\"thumbnail\"];\n                            as_A_Prop[\"bookTitle\"] = book[\"title\"];\n                            as_A_Prop[\"bookAuthor\"] = book[\"authors\"] === undefined? \"\" : book[\"authors\"];\n                            return (<li key={book[\"id\"]}>{BookComponent(as_A_Prop)}</li>);\n                        })\n                    }\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nexport default ShelfComponent;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ShelfComponent from './ShelfComponent';\nfunction MyReadsComponent(props) {\n    return (\n        <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <div>\n                    {ShelfComponent(Object.assign({ data: props.currentlyReadingBookList }, { shelf: \"currentlyReadingBookList\" },\n                        { shelfTitle: \"Currently Reading\" }, { informClick: props.informClick }))}\n                    {ShelfComponent(Object.assign({ data: props.wantToReadBookList }, { shelf: \"wantToReadBookList\" },\n                        { shelfTitle: \"Want to Read\" }, { informClick: props.informClick }))}\n                    {ShelfComponent(Object.assign({ data: props.ReadBookList }, { shelf: \"ReadBookList\" },\n                        { shelfTitle: \"Read\" }, { informClick: props.informClick }))}\n                </div>\n            </div>\n            <div className=\"open-search\">\n                <Link to=\"/search\" >Add a book</Link>\n            </div>\n        </div>\n    );\n}\n\n\nexport default MyReadsComponent;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport BookComponent from './BookComponent'\r\nconst BooksAPI = require('./BooksAPI')\r\n\r\nclass SearchComponent extends Component {\r\n    state = { searchText: \"\", fetchedBooks: [] };\r\n    initBookList = async (searchText) => {\r\n        let booksArr = await BooksAPI.search(searchText, 20);\r\n        let rtrnVal = []\r\n        if (booksArr.length !== undefined)\r\n            for (let el of booksArr) {\r\n                let propsToGive = {};\r\n                propsToGive[\"org\"] = el;\r\n                propsToGive[\"informClick\"] = this.props.mainAppState[\"informClick\"];\r\n                propsToGive[\"bgImage\"] = el[\"imageLinks\"]===undefined?\"\": el[\"imageLinks\"][\"thumbnail\"];\r\n                propsToGive[\"bookTitle\"] = el[\"title\"];\r\n                propsToGive[\"bookAuthor\"] = el[\"authors\"] === undefined? \"\" : el[\"authors\"];\r\n                let found_on_A_Shelf = false;\r\n                let shelfNames = ['currentlyReadingBookList', 'wantToReadBookList', 'ReadBookList'];\r\n                // starting from here we prepare the props of the book component\r\n                for (let shelfN of shelfNames) { //shelfN represents a shelf name\r\n                    this.props.mainAppState[shelfN].map((e) => { // here we map through shelf books if found this book in it, we now know the prop left (\"shelf\")\r\n                        if (!found_on_A_Shelf) {\r\n                            if (e[\"id\"] === el[\"id\"]) {\r\n                                propsToGive[\"shelf\"] = shelfN;\r\n                                found_on_A_Shelf = true;\r\n\r\n                            }\r\n                        }\r\n                        return \"return value not important here actually\";\r\n                    })\r\n                }\r\n                if (!found_on_A_Shelf) {\r\n                    propsToGive[\"shelf\"] = \"none\";\r\n                }\r\n                // -------------------------------------------------------------\r\n                rtrnVal.push((<li key={el.id}>{BookComponent(propsToGive)}</li>))\r\n            }\r\n        return rtrnVal;\r\n    }\r\n    async showTheBooks() {\r\n        if (this.state.searchText !== \"\") {\r\n            let Lis = await this.initBookList(this.state.searchText);\r\n            this.setState({ fetchedBooks: Lis })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link className=\"close-search\" to=\"/\">Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input type=\"text\" onChange={(e) => {\r\n                            this.setState({ searchText: e.target.value });\r\n                            this.showTheBooks();\r\n                        }} placeholder=\"Search by title or author\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {this.state.fetchedBooks.map(e => e)}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default SearchComponent;","// I feel like I have made how state is changed more complicated than it had to be\nimport React from 'react'\nimport MyReadsComponent from './MyReadsComponent'\nimport SearchComponent from './SearchComponent'\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport {getAll} from './BooksAPI'\nimport './App.css'\n\nclass BooksApp extends React.Component {\n    state = { // arrays of objects\n        currentlyReadingBookList: [],\n        wantToReadBookList: [],\n        ReadBookList: []\n    };\n    prepareShelfName(x) {\n        if (x === \"currentlyReading\")\n            return \"currentlyReadingBookList\";\n        else if (x === \"wantToRead\")\n            return \"wantToReadBookList\";\n        else if (x === \"read\")\n            return \"ReadBookList\";\n    }\n\n    informClick = (bookTitle, oldShelf, newShelf, data) => {\n        // set the new state by filtering the array of the old shelf\n        // and then add it to the array of the new shelf\n        let newStateObj = {};\n        if (oldShelf !== \"none\") newStateObj[oldShelf] = this.state[oldShelf].filter(e => e[\"title\"] !== bookTitle);\n        if (newShelf !== \"none\") {\n            this.state[newShelf].push(data)\n            let newArr = this.state[newShelf]\n            newStateObj[newShelf] = newArr\n        }\n        this.setState(newStateObj);\n    };\n\n    render() {\n\n        return (\n            <div className=\"app\">\n                <BrowserRouter>\n                    <Route exact path=\"/\">\n                        {MyReadsComponent(Object.assign(this.state, { informClick: this.informClick }))}\n                    </Route>\n                    <Route exact path=\"/search\" >\n                        <SearchComponent key=\"AnyRandom\" mainAppState={Object.assign(this.state, { informClick: this.informClick })} />\n                    </Route>\n                </BrowserRouter>\n            </div>\n        )\n    }\n\n    async componentDidMount() {\n        let booksAndShelves = await getAll();\n        let currentRead = [];\n        let readArr = [];\n        let wantToArr = [];\n        if (booksAndShelves.length !== undefined) {\n            booksAndShelves.map(e=>{\n                if (e.shelf === \"currentlyReading\")\n                currentRead.push(e);\n                else if (e.shelf === \"wantToRead\")\n                wantToArr.push(e);\n                else if (e.shelf === \"read\")\n                readArr.push(e);\n                return \"return value doesn't matter\";\n\n            })\n        }\n        this.setState({currentlyReadingBookList: currentRead, ReadBookList: readArr, wantToReadBookList: wantToArr})\n    }\n}\n\n\n\nexport default BooksApp;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}